;--------------------------------------------------------------------------------
[SKIPSTART]
SPR_ORIに指定されたSPRITEの不透過色をSHADOWCOLOR色で塗ったSPRITEを作って返す関数
渡されたスプライトを１ドットずつ調べて生成するためスプライトが大きいと(多分)遅い
本当はかっこつけて@SILHOUETTEって付けたかったけど確実にタイプミスでキレるのでやめる
RESULTSに作ったSPRITEの名前を、RESULTにGの番号を入れて返す
	SPR_ORI = 影を生成するスプライト名
	SHADOWCOLOR = 影の色
	G_SHADOW = 影を生成するGRAPHICSのID
[SKIPEND]
;--------------------------------------------------------------------------------
@SHADOW(SPR_ORI = "" , SHADOWCOLOR = 0x88888888 , G_SHADOW = -1)
#DIM SHADOWCOLOR
#DIM G_SHADOW
#DIM G_ORI = 99885621
#DIM CNT_X
#DIM CNT_Y
#DIM PREVC
#DIM LINESTART
#DIMS SPR_ORI
#DIMS SPR_SHADOW

SPR_SHADOW = %SPR_ORI%_SHADOW

GCREATE G_SHADOW , SPRITEWIDTH(SPR_ORI) , SPRITEHEIGHT(SPR_ORI)

GCREATE G_ORI , SPRITEWIDTH(SPR_ORI) , SPRITEHEIGHT(SPR_ORI)
GDRAWSPRITE  G_ORI , SPR_ORI

;SPR_ORIを左上から１ドットずつ調べ、何か色があるならそこを影としてG_SHADOWの同じ座標に色塗りする
GSETBRUSH G_SHADOW , SHADOWCOLOR
FOR CNT_Y , 0 , GHEIGHT(G_ORI)
	LINESTART = -1
	FOR CNT_X , 0 , GWIDTH(G_ORI)
		PREVC = GGETCOLOR(G_ORI , CNT_X , CNT_Y)
		IF PREVC > 0 && LINESTART == -1
			LINESTART = CNT_X
		ELSEIF PREVC == 0 && LINESTART >= 0
			GFILLRECTANGLE G_SHADOW , LINESTART , CNT_Y , CNT_X - LINESTART , 1
			LINESTART = -1
		ENDIF
	NEXT
NEXT

SPRITECREATE SPR_SHADOW , G_SHADOW

;デバッグ表示用
[SKIPSTART]
LOCALS = <img src='%SPR_ORI%' height='{SPRITEHEIGHT(SPR_ORI)}px'><img src='%SPR_SHADOW%' height='{SPRITEHEIGHT(SPR_SHADOW)}px'>
HTML_PRINT LOCALS
REPEAT 40
	PRINTL 
REND
WAIT
[SKIPEND]

RESULTS = %SPR_SHADOW%
RETURN G_SHADOW


;--------------------------------------------------------------------------------
[SKIPSTART]
SPR_ORIとSPR_CLOTHを比較し、条件を満たしたらG_SHADOWの同じ座標をSHADOWCOLORで塗る関数
RESULTにGRAPHICSのID(=G_SHADOW)を、RESULTSに生成した影画像のスプライト名を返す
SPR_ORIとSPR_CLOTHの解像度は同じであること(不一致の場合の動作は未確認)
	SPR_ORI=日焼け跡を付けるSPRITE。この絵のドットの色が非0、かつSPR_CLOTHの同じ箇所の色が0なら日焼け跡を生成する
	SPR_CLOTH=衣服SPRITE
	SHADOW_COLOR=日焼け跡の色。省略してもいいよ
	G_SHADOW=生成するGRAPHICSのID。使って問題ないものを指定。未指定ならIDを検索して勝手に設定する
[SKIPEND]
;--------------------------------------------------------------------------------
@HIYAKE(SPR_ORI = "" , SPR_CLOTH = "" , SPR_NAME = "" , SHADOWCOLOR = 0x44650000 , G_SHADOW = -1)
#DIM SHADOWCOLOR
#DIM G_SHADOW
#DIM G_ORI = 99885621
#DIM ORI_COLOR
#DIM G_CLOTH = 654250
#DIM CLOTH_COLOR
#DIM IS_CLOTH
#DIM CNT_X
#DIM CNT_Y
#DIM LINESTART ;日焼け該当箇所の始点を一時記録する変数
#DIMS SPR_ORI
#DIMS SPR_CLOTH
#DIMS SPR_NAME
#DIMS SPR_SHADOW

SIF SPR_ORI == "" || SPR_CLOTH == "" || SPR_NAME == ""
	THROW 引数が不正  SPR_ORI=%SPR_ORI%  SPR_CLOTH=%SPR_CLOTH%  SPR_NAME=%SPR_NAME%
SIF G_SHADOW <= 0
	G_SHADOW = EMPTY_G()

SPR_SHADOW = %SPR_NAME%

GCREATE G_SHADOW , SPRITEWIDTH(SPR_ORI) , SPRITEHEIGHT(SPR_ORI)

;作者注：たぶん昔の自分はGRAPHICSからしか１ドットずつ色を参照する命令がないと思い込んでいる
;SPRITEGETCOLOR(SPRITENAME,X,Y)ならSPRITEから色を取得できる
GCREATE G_CLOTH , SPRITEWIDTH(SPR_CLOTH) , SPRITEHEIGHT(SPR_CLOTH)
GDRAWSPRITE G_CLOTH , SPR_CLOTH

GCREATE G_ORI , SPRITEWIDTH(SPR_ORI) , SPRITEHEIGHT(SPR_ORI)
GDRAWSPRITE G_ORI , SPR_ORI

;SPR_ORIとSPR_CLOTHを１ドットずつ色を取得し、
;SPR_ORIの色が非0(=肌がある場所)、かつSPR_CLOTHの色が0の箇所(=服がない場所)を日焼け箇所と見なしてG_SHADOWに着色する
GSETBRUSH G_SHADOW , SHADOWCOLOR
FOR CNT_Y , 0 , GHEIGHT(G_ORI)
	LINESTART = -1
	FOR CNT_X , 0 , GWIDTH(G_ORI)
		;命令で読みにくいのでSPR_ORI、SPR_CLOTHのそれぞれの色を変数に入れておく
		ORI_COLOR = GGETCOLOR(G_ORI , CNT_X , CNT_Y)
		CLOTH_COLOR = GGETCOLOR(G_CLOTH , CNT_X , CNT_Y)
		
		IF ORI_COLOR > 0 && CLOTH_COLOR == 0 && LINESTART == -1
			;SPR_ORIが非0(=肌がある)、SPR_CLOTHが0(=服がない)座標を日焼け処理の始点として記録
			LINESTART = CNT_X
		ELSEIF (ORI_COLOR == 0 || CLOTH_COLOR > 0) && LINESTART >= 0
			;SPR_ORIが0(=肌がない)、SPR_CLOTHが非0(=服がある)座標なら日焼け処理を打ち切るべき座標
			;日焼け処理の始点が記録されているなら始点からこの座標までを日焼け処理する
			GFILLRECTANGLE G_SHADOW , LINESTART , CNT_Y , CNT_X - LINESTART , 1
			LINESTART = -1
		ENDIF
	NEXT
NEXT

SPRITECREATE SPR_SHADOW , G_SHADOW

;テスト表示用
[SKIPSTART]
LOCALS = <nonbutton pos='0'><img src='%SPR_ORI%' WIDTH='{SPRITEWIDTH(SPR_ORI)}px' height='{SPRITEHEIGHT(SPR_ORI)}px'></nonbutton>
LOCALS:1 = <nonbutton pos='0'><img src='%SPR_SHADOW%' WIDTH='{SPRITEWIDTH(SPR_SHADOW)}px' height='{SPRITEHEIGHT(SPR_SHADOW)}px'></nonbutton>
LOCALS:2 = %LOCALS:0%%LOCALS:1%
LOCALS = <nonbutton pos='300'><img src='%SPR_ORI%' WIDTH='{SPRITEWIDTH(SPR_ORI)}px' height='{SPRITEHEIGHT(SPR_ORI)}px'></nonbutton>
LOCALS:1 = <nonbutton pos='300'><img src='%SPR_CLOTH%' WIDTH='{SPRITEWIDTH(SPR_CLOTH)}px' height='{SPRITEHEIGHT(SPR_CLOTH)}px'></nonbutton>
LOCALS:2 = <nobr>%LOCALS:2%%LOCALS:0%%LOCALS:1%</nobr>
HTML_PRINT LOCALS:2
REPEAT 5
	PRINTL 
REND
PRINTW END
[SKIPEND]

GDISPOSE G_CLOTH
GDISPOSE G_ORI

RESULTS = %SPR_SHADOW%
RETURN G_SHADOW

;--------------------------------------------------------------------------------
;空いているGRAPHICSのIDを検索して返す
;--------------------------------------------------------------------------------
@EMPTY_G
#FUNCTION
#DIM CNT
#DIM 検索上限 = 10000000
#DIM 検索下限 = 1

FOR CNT , 検索下限 , 検索上限
	SIF GCREATED(CNT) == 0
		RETURNF CNT
NEXT

RETURNF -1


;--------------------------------------------------------------------------------
;ARG_SPRに渡されたスプライトをひとつのGにまとめ、SPRNAMEに指定されたSPRITEにして返す
;GRAPHに生成に使うGのIDを受け取る(1以上。渡さないか0以下だと関数内でIDを生成する)
;RETURNは生成に使ったGのID。Gを破棄すると生成したSPRNAMEも破棄されるので注意
;ARG_SPRは文字列型の配列
;ARG_SPRに渡すSPRITEはすべて同じ解像度である必要がある…と思う(違った場合の動作は未確認)
;--------------------------------------------------------------------------------
@SPRITE_TO_ONE(ARG_SPR , SPRNAME = "" , GRAPH = -1)
#DIMS REF ARG_SPR
#DIMS SPRNAME
#DIM CNT
#DIM GRAPH

SIF GRAPH <= 0
	GRAPH = EMPTY_G()

GCREATE GRAPH , SPRITEWIDTH(ARG_SPR) , SPRITEHEIGHT(ARG_SPR)

;SPRITEが空文字でなく、かつ生成済みのものをGRAPHにコピーする
FOR CNT , 0 , VARSIZE("ARG_SPR")
	SIF ARG_SPR != "" && SPRITECREATED(ARG_SPR:CNT)
		GDRAWSPRITE GRAPH , ARG_SPR:CNT
NEXT
SPRITECREATE SPRNAME , GRAPH

;デバッグ用
[SKIPSTART]
LOCALS = <img src='%SPRNAME%' height='{SPRITEHEIGHT(SPRNAME)}px'>
PRINTFORML %LOCALS%
HTML_PRINT LOCALS
REPEAT 10
	PRINTL 
REND
PRINTW SPRITE_TO_ONE END
[SKIPEND]

RETURN GRAPH


;--------------------------------------------------------------------------------
;BODY、CLOTHを付き合わせて日焼け跡SPRITEを作成し、CHRのキャラの日焼けとして記録する
;CHRはキャラクターの番号、BODYは身体系、CLOTHは衣服系のスプライト名を受け取る
;生成物はDATATABLE"HIYAKE_DT"の列COL_CLOTHにSPRITE名が、COL_GIDに必要なGのIDが格納される
;キャラクター配列HIYAKE_CLOTH:CHR:0にもスプライト名が記録される
;--------------------------------------------------------------------------------
@CREATE_HIYAKE(CHR = -1 , AR_BODY , AR_CLOTH , HIYAKECOLOR = 0)
#DIM CHR
#DIM BODY_GID
#DIM CLOTH_GID
#DIM HIYAKE_GID
#DIM CNT
#DIM DT_ID
#DIM HIYAKECOLOR
#DIMS SPRITENAME
#DIMS REF AR_BODY
#DIMS REF AR_CLOTH
#DIMS CONST TEMPBODY = "TEMPBODY"   ;スプライト用一時名前
#DIMS CONST TEMPCLOTH = "TEMPCLOTH" ;スプライト用一時名前

SIF CHR < 0 || CHR >= CHARANUM
	THROW 不正な引数  CHR={CHR}

BODY_GID = 0
CLOTH_GID = 0
HIYAKE_GID = 0
SPRITENAME = 

;SPRITEが存在するか確認
IF HIYAKE_CLOTH:CHR:0 != ""
	IF SPRITECREATED(HIYAKE_CREATE_NAME(CHR , HIYAKECOLOR))
		;あれば処理終了
		RETURN 1
	ELSE
		;なければキャッシュが存在するか確認
		IF DT_SEARCH_IN_COLUMN(HIYAKE_DT , COL_CLOTH , HIYAKE_CREATE_NAME(CHR , HIYAKECOLOR)) >= 0
			;あればスプライト作成して終了
			SPRITECREATE HIYAKE_CLOTH:CHR:0 , DT_CELL_GET(HIYAKE_DT , DT_SEARCH_IN_COLUMN(HIYAKE_DT , COL_CLOTH , HIYAKE_CREATE_NAME(CHR , HIYAKECOLOR)) , COL_GID)
			RETURN 1
		ENDIF
	ENDIF
ENDIF

;はき出されたSPRITEをひとつに合成。RESULTはSPRITEに必要なGID
CALL SPRITE_TO_ONE(AR_BODY , TEMPBODY)
BODY_GID = RESULT
CALL SPRITE_TO_ONE(AR_CLOTH , TEMPCLOTH)
CLOTH_GID = RESULT

;日焼け跡生成時のキャラクターの服装と色をひとつの文字列にし、SPRITE名にする
SPRITENAME = %HIYAKE_CREATE_NAME(CHR , HIYAKECOLOR)%

;日焼け跡生成
CALL HIYAKE(TEMPBODY , TEMPCLOTH , SPRITENAME , HIYAKECOLOR)
HIYAKE_GID = RESULT

;上の日焼け生成で使った一時SPRITE、一時GRAPHICSは必ず破棄(次回の試行で失敗するため)
SPRITEDISPOSE TEMPBODY
SPRITEDISPOSE TEMPCLOTH
GDISPOSE BODY_GID
GDISPOSE CLOTH_GID

IF DT_EXIST(HIYAKE_DT) == 0
	;DATATABLEが見つからないのは不具合なのでデバッグモードの有無にかかわらず表示
	PRINTFORMW データテーブル「%HIYAKE_DT%」が見つかりません。GLOBAL付きDATATABLEはERBから作れません
ELSE
	SIF DT_COLUMN_ADD(HIYAKE_DT , COL_CLOTH , "string") != 0
		DEBUGPRINTL CREATE_HIYAKE:データテーブル「%HIYAKE_DT%」に列「%COL_CLOTH%」がないから追加するね
	SIF DT_COLUMN_ADD(HIYAKE_DT , COL_GID , "int64") != 0
		DEBUGPRINTL CREATE_HIYAKE:データテーブル「%HIYAKE_DT%」に列「%COL_GID%」がないから追加するね	
ENDIF

;作った日焼け跡SPRITEと生成時の衣装をDATATABLEの同一行に格納
DT_ID = DT_ROW_ADD(HIYAKE_DT)
DT_CELL_SET HIYAKE_DT , DT_ID , COL_CLOTH , SPRITENAME , 1
DT_CELL_SET HIYAKE_DT , DT_ID , COL_GID , HIYAKE_GID , 1

;日焼け跡のSPRITE名をキャラクター変数に格納
HIYAKE_CLOTH:CHR:0 = %SPRITENAME%

RETURN 1


;--------------------------------------------------------------------------------
;CHRのキャラの日焼け跡SPRITEが存在するかチェックし、ないなら作る関数
;--------------------------------------------------------------------------------
@CHECK_HIYAKE(CHR = -1)
#DIM CHR
#DIM HIYAKECOLOR
#DIMS HIYAKE_CLOTH_TEMP , 20

SIF CHR < 0 || CHR >= CHARANUM
	THROW 引数がキャラの範囲外  CHR={CHR}

;日焼け設定がないならSPRITEもないので0を返して終了
SIF HIYAKE_CLOTH:CHR:0 == ""
	RETURN 0

;PRINTFORMW %HIYAKE_CLOTH:CHR:0%

;キャラの日焼けスプライト名から服パーツを取得
CALL HIYAKE_SPLIT_NAME(CHR , HIYAKE_CLOTH_TEMP)
HIYAKECOLOR = TOINT(REPLACE(HIYAKE_CLOTH_TEMP:FINDELEMENT(HIYAKE_CLOTH_TEMP , COLOR) , COLOR , ""))
HIYAKE_CLOTH_TEMP:FINDELEMENT(HIYAKE_CLOTH_TEMP , COLOR) = 

;日焼け跡SPRITEがないなら作成
IF SPRITECREATED(HIYAKE_CLOTH:CHR:0) == 0
	;変数"身体系"、"衣装系"にHTML_PRINTで使う文字列を呼び出す
	VARSET 身体系
	VARSET 衣装系
	CALLF C_PICTURE_HTML(CHR , 0 , 0 , 0 , 0)

	;日焼け跡生成処理
	CALL CREATE_HIYAKE(CHR , 身体系 , 衣装系 , HIYAKECOLOR)
	RETURN 1
ENDIF

RETURN 1


;--------------------------------------------------------------------------------
;キャラ全員に対し日焼け跡の存在チェック、なければ生成を行う
;SKIP_MASTERを0にすると主人にも実行
;--------------------------------------------------------------------------------
@CHECK_HIYAKE_ALL(SKIP_MASTER = 1)
#DIM CNT
#DIM CREATED_NUM
#DIM HIYAKECOLOR
#DIM SKIP_MASTER

CREATED_NUM = 0

FOR CNT , 0 , CHARANUM
	;主人は飛ばし
	SIF CNT == MASTER && SKIP_MASTER == 0
		CONTINUE

	CALL CHECK_HIYAKE(CNT)
NEXT

RETURN 1


;--------------------------------------------------------------------------------
;日焼け跡パッチで使う日焼け跡のSPRITE名を作る関数
;衣装系、身体系の変数を破壊する
;--------------------------------------------------------------------------------
@HIYAKE_CREATE_NAME(CHR = -1 , CLR = -1)
#FUNCTIONS
#DIM CHR
#DIM CNT
#DIM CLR
#DIMS TEMPS

SIF CLR < 0 || CLR > 0xFFFFFFFF
	THROW 色情報が不正  COLOR={CLR}

VARSET TEMPS
VARSET 衣装系
VARSET 身体系
CALLF C_PICTURE_HTML(CHR , 0 , 0 , 0 , 0)

IF VARSIZE("衣装系") > 1
	FOR CNT , 0 , VARSIZE("衣装系")
		IF 衣装系:CNT != ""
			IF TEMPS != ""
				TEMPS = %TEMPS%%区切り文字%%衣装系:CNT%
			ELSE
				TEMPS = %衣装系:CNT%
			ENDIF
		ENDIF
	NEXT
ENDIF

;色情報
TEMPS = %TEMPS%%区切り文字%%COLOR%{CLR}
RETURNF TEMPS


;--------------------------------------------------------------------------------
;HIYAKE_SPLIT_NAMEで生成した日焼け跡のSPLITE名を個別のSPLITE名に分解して配列に格納する
;CHRにキャラクター番号を、SPLNAMEに受け渡し配列名を受け取る。SPLNAMEは消去される
;分割数をRETURNする
;"区切り文字"はグローバル定数
;--------------------------------------------------------------------------------
@HIYAKE_SPLIT_NAME(CHR = -1 , SPLNAME)
#DIM CHR
#DIMS REF SPLNAME

SIF CHR < 0 || CHR >= CHARANUM
	THROW 引数が不正  CHR={CHR}

VARSET SPLNAME

;もし日焼け設定がなければ終了
SIF HIYAKE_CLOTH:CHR:0 == ""
	RETURN 0

;SPLIT処理。分割数をRETURNして終了
SPLIT HIYAKE_CLOTH:CHR:0 , 区切り文字 , SPLNAME
RETURN RESULT


;--------------------------------------------------------------------------------
;日焼け跡パッチで使うDATATABLEを作る関数
;--------------------------------------------------------------------------------
@HIYAKE_MAKE_DT
SIF DT_CREATE(HIYAKE_DT)
	DEBUGPRINTFORML %HIYAKE_DT%作成

SIF DT_COLUMN_EXIST(HIYAKE_DT , COL_CLOTH) == 0
	DT_COLUMN_ADD HIYAKE_DT , COL_CLOTH , "string"

SIF DT_COLUMN_EXIST(HIYAKE_DT , COL_GID) == 0
	DT_COLUMN_ADD HIYAKE_DT , COL_GID , "int64"

RETURN 1


;--------------------------------------------------------------------------------
;日焼け跡記録用DATATABLEを検索し、誰も使っていない日焼け画像があれば
;SPRITEとGRAPHICSを破棄し、DATATABLEから抹消する
;--------------------------------------------------------------------------------
@HIYAKE_DT整理(DTNAME = "")
#DIM CNT
#DIM DELNUM
#DIMS DTNAME
#DIMS CONST DEL = "DEL"

SIF DTNAME == ""
	DTNAME = %HIYAKE_DT%

DELNUM = 0

FOR CNT , 0 , DT_ROW_LENGTH(DTNAME)
	;CNT行の日焼け画像を使用中のキャラがいるか検索
	IF FINDCHARA(HIYAKE_CLOTH:0 , DT_CELL_GETS(DTNAME , CNT , COL_CLOTH)) == -1
		;もし誰も使っていないならSPRITE/GRAPHICS破棄、DATATABLEの該当行を消しCNTを-1
		SPRITEDISPOSE DT_CELL_GETS(DTNAME , CNT , COL_CLOTH)
		GDISPOSE DT_CELL_GET(DTNAME , CNT , COL_GID)
		DT_ROW_REMOVE DTNAME , DT_CELL_GET(DTNAME , CNT , "id")
		DELNUM++
		CNT--
	ENDIF
NEXT

DEBUGPRINTFORML @HIYAKE_DT整理：{DELNUM}行を削除
RETURN 1


;--------------------------------------------------------------------------------
;渡されたDATATABLEから渡された数値or文字列があるか調べる式中間数
;見つかれば何行目か返す。なければ-1
;NUMには何番目に見つかった行を返すか受け取る
;--------------------------------------------------------------------------------
@DT_SEARCH_IN_COLUMN(DTNAME = "" , COLNAME = "" , VALUES = "" , NUM = 1)
#FUNCTION
#DIMS DTNAME
#DIMS COLNAME
#DIMS VALUES
#DIM NUM
#DIM CNT
#DIM ISINT

SIF DTNAME == "" || COLNAME == "" || VALUES == "" || NUM <= 0
	THROW 引数が不正  DTNAME=%DTNAME%  COLNAME=%COLNAME%  VALUES=%VALUES%  NUM={NUM}

;例外チェック
VARSET ISINT
SELECTCASE DT_COLUMN_EXIST(DTNAME , COLNAME)
	CASE 0
		;DTNAMEにCOLNAMEの列がないか、DTNAMEのDATATABLEがない
		IF DT_EXIST(DTNAME)
			THROW DTNAMEに指定された列がない  DTNAME=%DTNAME%  COLNAME=%COLNAME%
		ELSE
			THROW 指定されたDATATABLEが存在しない  DTNAME=%DTNAME%
		ENDIF
	;DT_COLUMN_EXISTの戻り値1,2,3,4はすべて"列が数値型である"ことを示す
	CASE 1 , 2 , 3 , 4
		;列が数値型かつVALUESが文字列ならエラー、そうでないなら数値型フラグ立て
		IF ISNUMERIC(VALUES) == 0
			THROW 数値型の列に文字列を渡した  DTNAME=%DTNAME%  COLUMN=%COLNAME%  VALUES=%VALUES%
		ELSE
			ISINT = 1
		ENDIF
ENDSELECT

;全ての行を検索し、数値型か文字列型かで一致するものがあったら行番号を返す
FOR CNT , 0 , DT_ROW_LENGTH(DTNAME)
	IF ISINT
		IF DT_CELL_GET(DTNAME , CNT , COLNAME) == TOINT(VALUES)
			NUM -= 1
			SIF NUM == 0
				RETURNF CNT
		ENDIF
	ELSE
		IF DT_CELL_GETS(DTNAME , CNT , COLNAME) == VALUES
			NUM -= 1
			SIF NUM == 0
				RETURNF CNT
		ENDIF
	ENDIF
NEXT
;なければ-1
RETURNF -1


;--------------------------------------------------------------------------------
;日焼けの色、および濃淡を設定する
;戻り値は0xAARRGGBB
;--------------------------------------------------------------------------------
@HIYAKE_CHANGE_COLOR(INITCOLOR = -1)
#DIM CONST END = -1
#DIM CONST PALE = -2
#DIM CONST DEEP = -3
#DIM CONST DIFF = 16 ;[濃く]、[薄く]選択時のALPHA値の変化量
#DIM SAVE_REDRAW    ;現在のREDRAWを保存
#DIM TEMPCOLOR = HIYAKE_DEF_COLOR:0 ;選択されているRGB値
#DIM ALPHA = 80     ;選択されているALPHA値
#DIM SAVE_COLOR
#DIM TEMPLINE
#DIM INITCOLOR
#DIM CNT

SIF INITCOLOR > 0xFFFFFFFF
	THROW 引数が不正  INITCOLOR=0x%CONVERT(INITCOLOR , 16)%

IF INITCOLOR >= 0
	ALPHA = INITCOLOR / 0x1000000
	TEMPCOLOR = INITCOLOR % 0x1000000
ENDIF

DRAWLINE

;画面再表示用の行数
TEMPLINE = LINECOUNT

;このDOLOOPはBREAKされない
DO	
	;ASはREDRAW 1が標準なので一旦切り替え
	SAVE_REDRAW = CURRENTREDRAW()
	REDRAW 0
	CLEARLINE LINECOUNT - TEMPLINE

	;現在選択中の色
	PRINT 현재 적용 중인 색：
	SAVE_COLOR = GETCOLOR()
	SETCOLOR TEMPCOLOR
	PRINTL ■
	SETCOLOR SAVE_COLOR

	;現在選択中の透過度
	PRINT 현재 적용 중인 색조
	PRINTBUTTON "[연하게]" , PALE
	PRINT ＜
	;簡単なバー
	PRINTFORM %"・" * (ALPHA / (256 / 16))%△%"・" * ((255 - ALPHA) / (256 / 16))%
	PRINT ＞
	PRINTBUTTON "[진하게]" , DEEP
	PRINTFORML ({ALPHA , 3 , RIGHT}/255)

	;プリセット色の選択肢
	PRINT 프리셋 색　：
	FOR CNT , 0 , VARSIZE("HIYAKE_DEF_COLOR")
		SAVE_COLOR = GETCOLOR()
		SETCOLOR HIYAKE_DEF_COLOR:CNT
		PRINTBUTTON "■" , HIYAKE_DEF_COLOR:CNT
		SETCOLOR SAVE_COLOR
	NEXT
	PRINTL 

	DRAWLINE

	;任意色の選択肢(RGB形式)
	CALL PRINT_RGB_SLIDER(TEMPCOLOR)

	PRINTBUTTON "[종료]" , END
	PRINTL 

	;保存したREDRAWを戻す
	REDRAW SAVE_REDRAW

	INPUT

	;選択処理部
	SELECTCASE RESULT
		CASE END
			;選択終了
			;#;PRINTFORMW 選択は{TEMPCOLOR + ALPHA * 0x1000000}(0x%CONVERT(TEMPCOLOR + ALPHA * 0x1000000 , 16)%)です
			RETURN TEMPCOLOR + ALPHA * 0x1000000
		CASE PALE
			;透明にする
			ALPHA = MAX(ALPHA - DIFF , 0)
			CONTINUE
		CASE DEEP
			;不透明にする
			ALPHA = MIN(ALPHA + DIFF , 0xFF)
			CONTINUE
		CASE 0 TO 0xFFFFFF
			;色の指定
			TEMPCOLOR = RESULT
	ENDSELECT
LOOP 71



;以下はeratohoK V1.29.3より流用させて頂きました。ありがとうございます
;================================================================
; RGBスライダーの生成。（バーっぽく見えるけど実際はボタンの集合体）
;--------------------------------
;	nBaseColor	: 基準となるカラー値
;================================================================
@PRINT_RGB_SLIDER( nBaseColor )
#LOCALSIZE 4
	#DIM nBaseColor

	#DIM nColorBuf
	#DIM color_RGB, 3
	#DIM nSelectMark
	#DIM loopColor
	#DIM loopRGB
	#DIM colorMem
	#DIMS strFontMem

	colorMem = GETCOLOR()
	strFontMem = %GETFONT()%
	nColorBuf = nBaseColor

	SIF LINEISEMPTY() == 0
		PRINTFORML

	color_RGB:0 = nColorBuf / 256 / 256
	color_RGB:1 = nColorBuf / 256 % 256
	color_RGB:2 = nColorBuf % 256

	SETFONT "ＭＳ ゴシック"
	FOR loopRGB, 0, 3
		SELECTCASE loopRGB
			CASE 0
			; R値を変更
				PRINTFORM %" Ｒ値: "%
			CASE 1
			; G値を変更
				PRINTFORM %" Ｇ値: "%
			CASE 2
			; B値を変更
				PRINTFORM %" Ｂ値: "%
		ENDSELECT
		FOR loopColor, 0, 65
		; 0x00～0xFF（0x04刻み）
			nSelectMark = 0
			LOCAL:1 = color_RGB:0
			LOCAL:2 = color_RGB:1
			LOCAL:3 = color_RGB:2
			SELECTCASE loopRGB
				CASE 0
				; R値を変更
					LOCAL:1 = LIMIT(loopColor * 0x04, 0x00, 0xFF)
					SIF loopColor == ((color_RGB:0 + 3) / 0x04)
						nSelectMark = 1
				CASE 1
				; G値を変更
					LOCAL:2 = LIMIT(loopColor * 0x04, 0x00, 0xFF)
					SIF loopColor == ((color_RGB:1 + 3) / 0x04)
						nSelectMark = 1
				CASE 2
				; B値を変更
					LOCAL:3 = LIMIT(loopColor * 0x04, 0x00, 0xFF)
					SIF loopColor == ((color_RGB:2 + 3) / 0x04)
						nSelectMark = 1
			ENDSELECT
			LOCAL = (LOCAL:1 * 256 * 256) + (LOCAL:2 * 256) + (LOCAL:3)
			SETCOLOR LOCAL
			; 半角サイズの■ボタン。番号はそのカラー値を使用する
			IF nSelectMark == 0
				PRINTBUTTON @"%UNICODE(0x2588)%", LOCAL
			ELSE
				PRINTBUTTON @"%UNICODE(0x2593)%", LOCAL
			ENDIF
		NEXT
		PRINTL 
		RESETCOLOR
	NEXT

	; フォント,色を元に戻す
	SETCOLOR colorMem
	SETFONT strFontMem

	RETURN
